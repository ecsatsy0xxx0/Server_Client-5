#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

std::mutex mtx;
std::condition_variable cv;
bool dataReady = false;
int sharedData = 0;

void producerThread() {
    // ... Производит данные ...
    {
        std::lock_guard<std::mutex> lock(mtx);
        dataReady = true;
        sharedData = 10; // Пример данных
    }
    cv.notify_one(); // Сигнализируем о готовности данных
}

void consumerThread() {
    std::unique_lock<std::mutex> lock(mtx);
    cv.wait(lock, [] { return dataReady; }); // Ждем сигнала
    std::cout << "Consumer received: " << sharedData << std::endl;
}

int main() {
    std::thread producer(producerThread);
    std::thread consumer(consumerThread);

    producer.join();
    consumer.join();

    return 0;
}