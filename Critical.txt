#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <random>

std::mutex mtx;
std::vector<int> sharedData;

void clientThread(int clientId) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    for (int i = 0; i < 5; ++i) {
        int value = distrib(gen);
        {
            std::lock_guard<std::mutex> lock(mtx);
            sharedData.push_back(value);
            std::cout << "Client " << clientId << " added: " << value << std::endl;
        }
    }
}

int main() {
    int numClients = 3;
    std::vector<std::thread> threads;

    for (int i = 1; i <= numClients; ++i) {
        threads.emplace_back(clientThread, i);
    }

    for (auto& thread : threads) {
        thread.join();
    }

    std::cout << "Final shared data: ";
    for (int value : sharedData) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}
