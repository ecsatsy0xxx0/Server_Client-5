#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <random>
using namespace std;

mutex mtx;
vector<int> sharedData;

void clientThread(int clientId) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> distrib(1, 10);

    for (int i = 0; i < 5; ++i) {
        int value = distrib(gen);
        {
            lock_guard<mutex> lock(mtx);
            sharedData.push_back(value);
            cout << "Client " << clientId << " added: " << value << endl;
        }
    }
}

int main() {
    int numClients = 3;
    vector<thread> threads;

    for (int i = 1; i <= numClients; ++i) {
        threads.emplace_back(clientThread, i);
    }

    for (auto& thread : threads) {
        thread.join();
    }

    cout << "Final shared data: ";
    for (int value : sharedData) {
        cout << value << " ";
    }
    cout << endl;

    return 0;
}
